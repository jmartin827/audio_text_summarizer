apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
          # TODO decide on amount and type of probes
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - redis-cli ping | grep PONG
            initialDelaySeconds: 25
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - redis-cli ping | grep PONG
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          envFrom:
            - configMapRef:
                name: app-configs
          resources:
            limits:
              cpu: "0.1"
              memory: "128Mi"
            requests:
              cpu: "0.05"
              memory: "64Mi"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
spec:
  selector:
    matchLabels:
      app: celery-worker
  replicas: 2
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
        - name: celery-worker
          image: dockerman2322/celery:test
          imagePullPolicy: Always
          # Constantly checks that it can communicate with redis
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - >
                  if redis-cli -h redis ping | grep -q PONG; then
                    echo "ready"
                    exit 0
                  else
                    echo "not ready"
                    exit 1
                  fi
            initialDelaySeconds: 40
            periodSeconds: 60
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              # Will look for workers and a worker will result in "celery-worker" being shown.
              command:
                - sh
                - -c
                - "celery status | grep -q celery-worker"
            initialDelaySeconds: 60
            periodSeconds: 180
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 2
          lifecycle:
            # Initializes the container with Whisper
            postStart:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    python3 initialize.py
                    if [ $? -eq 0 ]; then
                      echo "Validation successful"
                    else
                      echo "Validation failed, exiting"
                      exit 1
                    fi

          envFrom:
            - configMapRef:
                name: app-configs
          volumeMounts:
            - name: shared-file-input-pv
              mountPath: /input
          resources:
            limits:
              cpu: "1.5"
              memory: "1200Mi"
            requests:
              cpu: "1.25"
              memory: "1000Mi"
      volumes:
        - name: shared-file-input-pv
          persistentVolumeClaim:
            claimName: shared-file-input-pvc

--- # TODO get flower api working for info throughout manifest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flower
spec:
  selector:
    matchLabels:
      app: flower
  replicas: 1
  template:
    metadata:
      labels:
        app: flower
    spec:
      containers:
        - name: flower
          image: mher/flower
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: app-configs
          ports:
            - containerPort: 8888
          resources:
            limits:
              cpu: "0.075"
              memory: "128Mi"
            requests:
              cpu: "0.05"
              memory: "64Mi"
          readinessProbe:
            httpGet:
              path: /
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:  # TODO enable flower API and use elsewhere for worker status
            httpGet:
              path: /
              port: 8888
            initialDelaySeconds: 10
            periodSeconds: 20

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fast-api
spec:
  selector:
    matchLabels:
      app: fast-api
  replicas: 1
  template:
    metadata:
      labels:
        app: fast-api
    spec:
      containers:
        - name: fast-api
          image: dockerman2322/fast-api:test  # TODO clearly define CORS once testing done
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: app-configs
          volumeMounts:
            - name: shared-file-input-pv
              mountPath: /input
          ports:
            - name: fast-api
              containerPort: 8000
          resources:
            limits:
              cpu: "0.125"
              memory: "512Mi"
            requests:
              cpu: "0.100"
              memory: "512Mi"
          readinessProbe:
            httpGet:
              path: /api/healthcheck
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /api/healthcheck
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: shared-file-input-pv
          persistentVolumeClaim:
            claimName: shared-file-input-pvc
